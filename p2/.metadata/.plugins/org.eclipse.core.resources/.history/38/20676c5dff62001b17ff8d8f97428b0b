/*
 * lcd.c
 *
 *  Created on: Jan 30, 2021
 *      Author: 38164
 */

#include "lcd.h"

void LCD_Write(LCD_CommandReg reg, LCD_CommandVal val) {
	GPIOC->ODR = ((reg & 0x01) << 5) | (val & 0x0F);

	GPIOC->ODR |= 0x40;
	GPIOC->ODR &= ~0x40;
}

void LCD_CommandInitiate(LCD_CommandReg reg, LCD_CommandVal val) {
	LCD_Write(reg, val >> 4);
	LCD_Write(reg, val >> 0);

	vTaskDelay(pdMS_TO_TICKS(2));
}

void LCD_add_to_queue(LCD_CommandReg reg, LCD_CommandVal val){
	LCD_Command cmd = {reg, val};
	xQueueSend(queue_handle_LCD, &cmd, portMAX_DELAY);
}

void LCD_add_to_queue_from_ISR(LCD_CommandReg reg, LCD_CommandVal val, BaseType_t *pxHigherPriorityTaskWoken){
	LCD_Command cmd = {reg, val};
	xQueueSendFromISR(queue_handle_LCD, &cmd, pxHigherPriorityTaskWoken);
}

QueueHandle_t queue_handle_LCD;

void init_LCD() {
	xTaskCreate(task_function_for_LCD, "task_function_for_LCD", 64, NULL, 2, NULL);
	queue_handle_LCD = xQueueCreate(64, sizeof(LCD_Command));
}

void task_function_for_LCD(void* params) {
	vTaskDelay(pdMS_TO_TICKS(20));

	LCD_Write(LCD_INSTRUCTION, (LCD_FUNCTION_SET_INSTRUCTION | LCD_FUNCTION_SET_4_BIT_INTERFACE) >> 4);

	vTaskDelay(pdMS_TO_TICKS(2));

	LCD_CommandInitiate(LCD_INSTRUCTION, (LCD_FUNCTION_SET_INSTRUCTION |
										  LCD_FUNCTION_SET_4_BIT_INTERFACE	|
										  LCD_FUNCTION_SET_2_LINE |
										  LCD_FUNCTION_SET_5x8_DOTS));

	LCD_CommandInitiate(LCD_INSTRUCTION, (LCD_CONTROL_INSTRUCTION |
										  LCD_CONTROL_DISPLAY_ON |
										  LCD_CONTROL_CURSOR_OFF |
										  LCD_CONTROL_BLINK_OFF));

	LCD_CommandInitiate(LCD_INSTRUCTION, (LCD_ENTRY_MODE_INSTRUCTION |
										  LCD_ENTRY_MODE_INC_ADR |
										  LCD_ENTRY_MODE_SHIFT_OFF));

	LCD_CommandInitiate(LCD_INSTRUCTION, LCD_RETURN_HOME_INSTRUCTION);

	LCD_Command cmd;
	while(1) {
		xQueueReceive(queue_handle_LCD, &cmd, portMAX_DELAY);
		LCD_CommandInitiate(cmd.reg, cmd.val);
	}
}
